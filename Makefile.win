PLATFORM=win
include Makefile
OUTPUT=haxe.exe
EXTENSION=.exe
PACKAGE_SRC_EXTENSION=.zip

OCAMLOPT=ocamlopt.opt

kill:
	-@taskkill /F /IM haxe.exe

# allow Ocaml/Mingw as well
NATIVE_LIBS += -I "c:/program files/mingw/lib/"

# use make WODI=wodi32 -f Makefile.win to build using WODI 32bit
ifdef WODI
NATIVE_LIBS += -I "/opt/${WODI}/lib"
endif

# use make MSVC=1 -f Makefile.win to build for OCaml/MSVC

ifeq (${MSVC}, 1)
NATIVE_LIBS = shell32.lib libs/extc/extc_stubs.obj libs/extc/process_stubs.obj libs/extc/zlib/zlib.lib libs/objsize/c_objsize.obj
endif

ifeq (${MSVC_OUTPUT}, 1)
FILTER=sed 's/File "\([^"]\+\)", line \([0-9]\+\), \(.*\)/\1(\2): \3/' tmp.cmi
endif

ifeq (${FD_OUTPUT}, 1)
FILTER=sed '/File/{ N; s/File "\([^"]\+\)", line \([0-9]\+\), characters \([0-9-]\+\):[\r\n]*\(.*\)/\1:\2: characters \3 : \4/ }' tmp.cmi
endif

ifdef FILTER
CC_CMD=($(OCAMLOPT) $(ALL_CFLAGS) -c $< 2>tmp.cmi && $(FILTER)) || ($(FILTER) && exit 1)
CC_PARSER_CMD=($(OCAMLOPT) -pp camlp4o $(ALL_CFLAGS) -c src/syntax/parser.ml 2>tmp.cmi && $(FILTER)) || ($(FILTER) && exit 1)
endif

PACKAGE_FILES=$(OUTPUT) haxelib$(EXTENSION) std "$$(cygpath -w "$$(which zlib1.dll)")" "$$(cygpath -w "$$(which libpcre-1.dll)")"
NSIS_PATH=C:\Program Files (x86)\NSIS
INSTALLER_NEKO=http://nekovm.org/media/neko-2.1.0-win.zip

package_win:
	mkdir -p out
	rm -rf $(PACKAGE_FILE_NAME) $(PACKAGE_FILE_NAME).zip temp.zip
	# Copy the package contents to $(PACKAGE_FILE_NAME)
	# Using poor man's cp (zip then unzip), because cp in cygwin is quite broken
	mkdir -p $(PACKAGE_FILE_NAME)
	7z a -y -tzip -mx0 temp.zip $(PACKAGE_FILES) > log.txt || type log.txt
	cd extra && 7z a -y -tzip -mx0 ../temp.zip LICENSE.txt CONTRIB.txt CHANGES.txt > log.txt || type log.txt
	7z x -y temp.zip -o$(PACKAGE_FILE_NAME) > log.txt || type log.txt
	rm temp.zip
	# archive
	7z a -r -tzip out/$(PACKAGE_FILE_NAME)_bin.zip $(PACKAGE_FILE_NAME) > log.txt || type log.txt
	rm -r $(PACKAGE_FILE_NAME)
	rm log.txt extra/log.txt

package_win_installer:
	mkdir -p win-installer/resources/haxe
	cp -r $(PACKAGE_FILES) win-installer/resources/haxe
	curl -fsS -o neko_bin.zip --retry 3 $(INSTALLER_NEKO)
	7z x neko_bin.zip -owin-installer/resources
	mv win-installer/resources/neko-* win-installer/resources/neko
	cp extra/EnvVarUpdate.nsh win-installer
	mkdir -p win-installer/images
	cp -r extra/images/* win-installer/images
	sed -e 's/%%\(VERSION\|VERSTRING\|VERLONG\)%%/$(HAXE_VERSION)/g' extra/installer.nsi > win-installer/installer.nsi
	msbuild extra\setup.sln /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
	"$(NSIS_PATH)/makensis" win-installer/installer.nsi

package_choco:
	mkdir -p OUTPUT
	7z x -y out/$(PACKAGE_FILE_NAME)_bin.zip -oout > log.txt || type log.txt
	mv out/$(PACKAGE_FILE_NAME) out/choco
	sed -e 's/@SNAPSHOT_VERSION@/$(HAXE_VERSION)-SNAP$(COMMIT_DATE)/g' extra/choco/haxe.nuspec > out/choco/haxe.nuspec
	cd out/choco && choco pack
	mv out/choco/haxe.*.nupkg out
	rm -rf out/choco
